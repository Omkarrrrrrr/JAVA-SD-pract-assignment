Static keyword Assignement

1) Why do we need static keyword in java explain with example?
- The static keyword is mainly used for memory management in Java.
- A static keyword can be applied with variables, blocks, functions and class.
- The static keyword is a property of a class rather than an instance of the class.
-The static keyword is used for a constant variable or a method that is the same for every
instance of a class.

example- 
public class MyClass {
    // Static variable to keep track of the number of instances
    private static int instanceCount = 0;

    // Constructor increments the instance count
    public MyClass() {
        instanceCount++;
    }

    // Static method to get the total number of instances created
    public static int getInstanceCount() {
        return instanceCount;
    }

    public static void main(String[] args) {
        // Create multiple instances of MyClass
        MyClass obj1 = new MyClass();
        MyClass obj2 = new MyClass();
        MyClass obj3 = new MyClass();

        // Print the total number of instances using the static method
        System.out.println("Total instances created: " + MyClass.getInstanceCount()); // Output: Total instances created: 3
    }
}




2) What is class loading and how the java program actually works?
- Class Loading: In Java, classloading is the process of loading class files into the JVM
(Java Virtual Machine) at runtime. It is responsible for loading classes from various sources,
such as the file system, network, and databases, and making them available to the JVM for
execution.

The class loading process in Java is divided into three phases:
1. loading,
2. linking,
3. initialization.

- 
Understanding how a Java program works involves grasping several key concepts. Here's a simplified explanation of the process:

●**Writing Code**: We write Java code using a text editor or an Integrated Development Environment (IDE) like IntelliJ IDEA, Eclipse, or NetBeans.

●**Compiling Code**: Once we've written your Java code, we need to compile it into bytecode. This is done using the Java compiler (javac). The compiler checks our code for syntax errors and generates bytecode, which is a platform-independent intermediate representation of our code.

●**Bytecode**: Bytecode is a set of instructions that can be executed by the Java Virtual Machine (JVM). It's not machine code specific to any particular computer architecture, which makes Java a platform-independent language. Instead, bytecode is designed to be run on any device that has a JVM installed.

●**Running Code**: To execute your Java program, we use the Java interpreter (java). The interpreter loads the bytecode generated by the compiler and runs it on the JVM.

●**Java Virtual Machine (JVM)**: The JVM is a crucial component of the Java platform. It's responsible for executing Java bytecode. The JVM performs tasks such as loading and verifying bytecode, managing memory, and providing runtime environment support.

●**Execution**: When we run our Java program, the JVM loads the bytecode into memory and starts executing it. The JVM translates bytecode instructions into machine code instructions that are specific to the underlying hardware. As the program runs, the JVM manages memory allocation, garbage collection, exception handling, and other runtime tasks.

●**Termination**: Once our Java program finishes execution, the JVM terminates, and any allocated resources are released.



3)Can we mark a local variable as static?
- No, it's not possible to mark a local variable as static in Java.

In Java, the static keyword is used to declare class-level variables and methods, meaning they belong to the class rather than to any specific instance of the class. Static variables and methods are associated with the class itself and can be accessed using the class name without needing an instance of the class.

Local variables, on the other hand, are declared within methods, constructors, or blocks and have a scope limited to the block in which they are declared. They are not associated with the class and are not shared among different instances of the class. Therefore, it doesn't make sense to declare a local variable as static because static variables are meant to have class-level scope, while local variables have method-level scope.


4) Why is the static block executed before the main method in java?
- The static block in Java is executed before the main method because it's a part of the class initialization process. When a class is loaded into memory by the Java Virtual Machine (JVM), static blocks are executed and static variables are initialized. This ensures that any necessary setup or initialization tasks are performed before the class is used.

The main method serves as the entry point for the Java program, and it is called by the JVM after the class has been loaded and initialized. Since static blocks are executed during class initialization, they naturally precede the execution of the main method.


5) why is static method is called as class method also?
- Static methods are often referred to as class methods because they are associated with the class itself rather than with individual instances of the class.

●**Associated with the Class**: Static methods are declared using the static keyword within a class. They do not operate on instance variables and are not invoked on object instances. Instead, they belong to the class itself and can be accessed using the class name.

●**Accessed via Class Name**: Static methods can be called directly using the class name, without needing to create an instance of the class. This means they are accessible at the class level rather than the instance level.

●**Class-Level Behavior**: Since static methods are not tied to specific instances of a class, they often perform operations that are related to the class as a whole, rather than to individual objects. For example, utility methods, factory methods, or methods for performing class-level operations are typically declared as static.

●**No Implicit Reference to 'this'**: Inside a static method, there is no implicit reference to the current object (i.e., no this reference), because static methods are not associated with any particular instance of the class. This further emphasizes that static methods are related to the class itself rather than to instances of the class.



6) What is use of static blocks in java?
- ● These are the blocks which gets executed automatically at the loading the .class files
● If we want to perform any activity at the time of loading a .class file we have to define that activity inside the
static block.
● We can write any no of static blocks, those static blocks will be executed from top to bottom.
● Normally a static block is used to perform initialization of the static variables.


7) Difference between static and instance variables?
- Characteristic |	Static Variables	                |        Instance Variables
_______________________________________________________________________________________________________________________
       Scope	 |   Belongs to the class itself	        |       Belongs to each individual object instance
 Memory Allocatio|   Allocated once when class is loaded	|       Allocated separately for each object instance
      Access	 |   Accessed using class name directly	        |Accessed through instances of the class
Initialization	 |   Can be initialized at declaration          |Typically initialized within constructors
                 |    or in static block                        |       or directly at declaration
                 |   	                                        |
    Lifetime	 | Exist for entire duration of 	        |    Exist as long as the object instance exists, 
                 |   program execution                          |  eligible for garbage collection when no longer referenced
                 |                                              |
   Use Cases	 |Shared data among all instances of the class	|   Data unique to each object instance, 
                 |                                              |   representing object state or attributes


8) Difference between static and non static members

- Characteristic  |	   Static Members	                 |       Non-Static (Instance) Members
____________________________________________________________________________________________________________________________________
Associated with	  |      Class itself	                         |       Individual object instances
Memory Allocation |	 Allocated once when class is loaded	 |       Allocated separately for each object instance
Access	          |      Accessed using class name directly	 |       Accessed through instances of the class
Initialization	  | Can be initialized at declaration or         |       Typically initialized within constructors
                  |         in static block	                 |              or directly at declaration
                  |                                              |
Lifetime	  |Exist for entire duration of program execution|       Exist as long as the object instance exists, 
                  |                                              |       eligible for garbage collection when no longer referenced
                  |                                              |
Use Cases	  |Shared data among all instances of the class	 |       Data unique to each object instance, 
                                                                          representing object state or attributes