1. What is Input and Output Stream in Java?
-A stream can be defined as a sequence of data. The InputStream is used to read data from a source and
the OutputStream is used for writing data to a destination

2. What are the methods of OutputStream
write() - writes the specified byte to the output stream
write(byte[] array) - writes the bytes from the specified array to the output stream
flush() - forces to write all data present in the output stream to the destination
close() - closes the output stream

3. What is serialization in Java?
-Serialization is the process of converting an object into a stream of bytes to transfer it over a network or to
store it in a file or database. In Java, serialization is done by implementing the Serializable interface

4. What is the Serializable interface in Java?
-The Serializable interface in Java is a marker interface that has no methods. It is used to mark classes that
can be serialized, meaning their object instances can be converted into a stream of bytes

5. What is deserialization in Java?
-Deserialization is the process of converting a stream of bytes back into an object instance. This is done
after an object has been serialized

6. How is serialization achieved in Java?
-Serialization is achieved in Java by implementing the Serializable interface. When an object is serialized, its
state is converted into a stream of bytes, which can then be transferred over a network or stored in a file or
database

7. How is deserialization achieved in Java?
-Deserialization is achieved in Java by reading a stream of bytes and using them to recreate the original
object instance. This is done by calling the readObject() method of an ObjectInputStream instance

8. How can you avoid certain member variables of class from getting Serialized?
-Mark member variables as static or transient, and those member variables will no more be a part of
Serialization

9. What classes are available in the Java IO File Classes API?
-The following classes are available in the Java IM API and are important to work with files in Java
File
RandomAccessFile
FileInputStream
FileReader
FileOutputStream
FileWriter

What is Difference between Externalizable and Serialization interface ?
-
The Externalizable and Serializable interfaces in Java are used for object serialization, but they have some key differences. Here are the main points of distinction:

>>>>>>Serializable Interface

Purpose: 
The Serializable interface is a marker interface used to enable the default serialization mechanism for an object. 
It doesn't contain any methods.

Automatic Serialization: 
When a class implements Serializable, the Java runtime automatically handles the process of serializing and deserializing objects.
All non-transient and non-static fields are serialized.

Customization: 
You can customize the serialization process by implementing the writeObject and readObject methods within the class.

Default Mechanism: 
It uses the default serialization mechanism provided by the JVM, which can be less efficient and slower, but is easier to implement.


>>>>>>>>>>Externalizable Interface
Purpose: 
The Externalizable interface extends Serializable and adds two methods: writeExternal and readExternal. 
This interface provides complete control over the serialization process.

Manual Serialization: 
When a class implements Externalizable, it must explicitly define how its instances are serialized and deserialized by implementing the writeExternal and readExternal methods.

Efficiency: 
This approach can be more efficient since you have control over the exact data to be serialized, allowing for potentially smaller and faster serialization.

Customization: 
Complete control over the serialization process means you can optimize the serialization format and include/exclude specific data as needed.

